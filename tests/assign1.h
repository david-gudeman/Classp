/* BEGIN HEADER */
#ifndef assign1_INCLUDE_
#define assign1_INCLUDE_

#include <assert.h>
#include <unordered_map>
#include <utility>

#include "classp.h"

// Include files generated by bison
#include "assign1.yacc.hh"
#include "location.hh"
#include "position.hh"

namespace assign1 {
using std::istream;
using std::ostream;
using classp::classpPrint;
using classp::classpFormat;
using classp::AttributeMap;

// Location and state information from the parser.
typedef location ParseState;

extern ParseState defaultParseState;

class AstNode;
/* BEGIN FORWARD DECLARATIONS */
class B;
class B2;
class D;
class I;
class S;
/* END FORWARD DECLARATIONS */

// Base class for assign1 AST nodes
class AstNode : public classp::ClasspNode {
 public:
  string className() override { return "AstNode"; }
  AstNode(ParseState parseState)
    : parseState(parseState) {
    }

  // Write out a bracketed form of this AST from the declared syntax.
  virtual void bracketFormat(std::ostream& out, AstNode* self) {
    assert(false);
  }

  ParseState parseState;
};

/* BEGIN CLASS DEFINITIONS */
class B: public AstNode {
 public:
  string className() override { return "B"; }
  B(ParseState parseState, bool b);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  bool b;
};

class I: public AstNode {
 public:
  string className() override { return "I"; }
  I(ParseState parseState, int i);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  int i;
};

class S: public AstNode {
 public:
  string className() override { return "S"; }
  S(ParseState parseState, string s);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  string s;
};

class B2: public AstNode {
 public:
  string className() override { return "B2"; }
  B2(ParseState parseState, bool b);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  bool b;
};

class D: public AstNode {
 public:
  string className() override { return "D"; }
  D(ParseState parseState, B* b, I* i, S* s, B2* b2);
  static D* parse(istream& input, ostream& errors);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  B* b = nullptr;
  I* i = nullptr;
  S* s = nullptr;
  B2* b2 = nullptr;
};
/* END CLASS DEFINITIONS */

}  // namespace assign1
#endif // assign1_INCLUDE_

/* END HEADER */
