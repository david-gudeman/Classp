/* BEGIN HEADER */
#ifndef t10_INCLUDE_
#define t10_INCLUDE_

#include <assert.h>
#include <unordered_map>
#include <utility>

#include "classp.h"

// Include files generated by bison
#include "t10.yacc.hh"
#include "location.hh"
#include "position.hh"

namespace t10 {
using std::istream;
using std::ostream;
using classp::classpPrint;
using classp::classpFormat;
using classp::AttributeMap;

// Location and state information from the parser.
typedef location ParseState;

extern ParseState defaultParseState;

class AstNode;
/* BEGIN FORWARD DECLARATIONS */
class Iterator;
class Pattern;
class Symbol;
/* END FORWARD DECLARATIONS */

// Base class for t10 AST nodes
class AstNode : public classp::ClasspNode {
 public:
  string className() override { return "AstNode"; }
  AstNode(ParseState parseState)
    : parseState(parseState) {
    }

  // Write out a bracketed form of this AST from the declared syntax.
  virtual void bracketFormat(std::ostream& out, AstNode* self) {
    assert(false);
  }

  ParseState parseState;
};

/* BEGIN CLASS DEFINITIONS */
class Pattern: public AstNode {
 public:
  string className() override { return "Pattern"; }
  Pattern(ParseState parseState);
  static Pattern* parse(istream& input, ostream& errors);
  void printMembers(ostream& out) override;
  void bracketFormat(ostream& out, AstNode* self) override;

};

class Iterator: public Pattern {
 public:
  string className() override { return "Iterator"; }
  Iterator(ParseState parseState, Pattern* pattern1, Symbol* separator);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  Pattern* pattern1 = nullptr;
  Symbol* separator = nullptr;
};

class Symbol: public Pattern {
 public:
  string className() override { return "Symbol"; }
  Symbol(ParseState parseState, identifier a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  identifier a;
};
/* END CLASS DEFINITIONS */

}  // namespace t10
#endif // t10_INCLUDE_

/* END HEADER */
