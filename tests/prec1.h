/* BEGIN HEADER */
#ifndef prec1_INCLUDE_
#define prec1_INCLUDE_

#include <assert.h>
#include <unordered_map>
#include <utility>

#include "classp.h"

// Include files generated by bison
#include "prec1.yacc.hh"
#include "location.hh"
#include "position.hh"

namespace prec1 {
using std::istream;
using std::ostream;
using classp::classpPrint;
using classp::classpFormat;
using classp::AttributeMap;

// Location and state information from the parser.
typedef location ParseState;

extern ParseState defaultParseState;

class AstNode;
/* BEGIN FORWARD DECLARATIONS */
class A;
class Bleft;
class Bnassoc;
class Bright;
class Cleft;
class Cnassoc;
class Cright;
class Dleft;
class Dnassoc;
class Dright;
class Literal;
/* END FORWARD DECLARATIONS */

// Base class for prec1 AST nodes
class AstNode : public classp::ClasspNode {
 public:
  string className() override { return "AstNode"; }
  AstNode(ParseState parseState)
    : parseState(parseState) {
    }

  // Write out a bracketed form of this AST from the declared syntax.
  virtual void bracketFormat(std::ostream& out, AstNode* self) {
    assert(false);
  }

  ParseState parseState;
};

/* BEGIN CLASS DEFINITIONS */
class A: public AstNode {
 public:
  string className() override { return "A"; }
  A(ParseState parseState);
  void printMembers(ostream& out) override;
  void bracketFormat(ostream& out, AstNode* self) override;

};

class Bleft: public A {
 public:
  string className() override { return "Bleft"; }
  Bleft(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Cleft: public A {
 public:
  string className() override { return "Cleft"; }
  Cleft(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Dleft: public A {
 public:
  string className() override { return "Dleft"; }
  Dleft(ParseState parseState, A* a1, A* a2);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a1 = nullptr;
  A* a2 = nullptr;
};

class Bright: public A {
 public:
  string className() override { return "Bright"; }
  Bright(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Cright: public A {
 public:
  string className() override { return "Cright"; }
  Cright(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Dright: public A {
 public:
  string className() override { return "Dright"; }
  Dright(ParseState parseState, A* a1, A* a2);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a1 = nullptr;
  A* a2 = nullptr;
};

class Bnassoc: public A {
 public:
  string className() override { return "Bnassoc"; }
  Bnassoc(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Cnassoc: public A {
 public:
  string className() override { return "Cnassoc"; }
  Cnassoc(ParseState parseState, A* a);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a = nullptr;
};

class Dnassoc: public A {
 public:
  string className() override { return "Dnassoc"; }
  Dnassoc(ParseState parseState, A* a1, A* a2);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a1 = nullptr;
  A* a2 = nullptr;
};

class Literal: public A {
 public:
  string className() override { return "Literal"; }
  Literal(ParseState parseState, int val);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  int val;
};
/* END CLASS DEFINITIONS */

}  // namespace prec1
#endif // prec1_INCLUDE_

/* END HEADER */
