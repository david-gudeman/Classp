/* BEGIN HEADER */
#ifndef construct3_INCLUDE_
#define construct3_INCLUDE_

#include <assert.h>
#include <unordered_map>
#include <utility>

#include "classp.h"

// Include files generated by bison
#include "construct3.yacc.hh"
#include "location.hh"
#include "position.hh"

namespace construct3 {
using std::istream;
using std::ostream;
using classp::classpPrint;
using classp::classpFormat;
using classp::AttributeMap;

// Location and state information from the parser.
typedef location ParseState;

extern ParseState defaultParseState;

class AstNode;
/* BEGIN FORWARD DECLARATIONS */
class A;
class B;
class D;
/* END FORWARD DECLARATIONS */

// Base class for construct3 AST nodes
class AstNode : public classp::ClasspNode {
 public:
  string className() override { return "AstNode"; }
  AstNode(ParseState parseState)
    : parseState(parseState) {
    }

  // Write out a bracketed form of this AST from the declared syntax.
  virtual void bracketFormat(std::ostream& out, AstNode* self) {
    assert(false);
  }

  ParseState parseState;
};

/* BEGIN CLASS DEFINITIONS */
class A: public AstNode {
 public:
  string className() override { return "A"; }
  A(ParseState parseState);
  static A* parse(istream& input, ostream& errors);
  void printMembers(ostream& out) override;

};

class B: public A {
 public:
  string className() override { return "B"; }
  B(ParseState parseState, AttributeMap& keyword_args);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  A* a1 = nullptr;
};

class D: public A {
 public:
  string className() override { return "D"; }
  D(ParseState parseState, identifier str1, identifier str2);
  void printMembers(ostream& out) override;
  void format(ostream& out, int precedence) override;

  identifier str1;
  identifier str2;
};
/* END CLASS DEFINITIONS */

}  // namespace construct3
#endif // construct3_INCLUDE_

/* END HEADER */
